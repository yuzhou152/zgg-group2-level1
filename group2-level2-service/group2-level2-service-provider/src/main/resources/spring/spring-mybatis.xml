<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"  
	xmlns:aop="http://www.springframework.org/schema/aop"  
	xsi:schemaLocation="  
	http://www.springframework.org/schema/beans   
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
	http://www.springframework.org/schema/tx   
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
	http://www.springframework.org/schema/aop   
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">  
	<!-- 配置动态代理方式，false为JDK，true为CGlib -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 配置数据源 使用的是Druid数据源 -->  
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" /> 
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="mergeStat" /> -->
		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat" />  
	</bean>  
  
	<!-- myBatis文件 -->  
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dataSource" />  
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->  
		<property name="mapperLocations" value="classpath:mybatis/**/*.xml" /> 
	</bean>  
  
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
		<property name="basePackage" value="com.zgg.**.dao" />  
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
	</bean>  
   
	<!-- 配置事务管理器 -->  
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
		<property name="dataSource" ref="dataSource" />  
	</bean>  
  
	<!-- 注解方式配置事物 -->  
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/> -->
  
	<!-- 拦截器方式配置事物 -->  
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
		<tx:attributes>  
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />  
  			<tx:method name="put*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
  			
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />  
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />  
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />  
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />

		</tx:attributes>  
	</tx:advice>  
	<!-- Spring aop事务管理 -->  
	<aop:config>  
		<aop:pointcut id="transactionPointcut" expression="execution(* com.zgg..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>  
</beans> 